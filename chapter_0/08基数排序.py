"""
基数排序是一种非比较型整数排序算法，其原理是将整数按位数切割成不同的数字，然后按每个位数分别比较。
由于整数也可以表达字符串（比如名字或日期）和特定格式的浮点数，所以基数排序也不是只能使用于整数。
三种排序算法都利用了桶的概念，但对桶的使用方法上有明显差异：
    * 基数排序：根据键值的每位数字来分配桶；
    * 计数排序：每个桶只存储单一键值；
    * 桶排序：每个桶存储一定范围的数值；

基数排序是按照低位先排序，然后收集；再按照高位排序，然后再收集；依次类推，直到最高位。
有时候有些属性是有优先级顺序的，先按低优先级排序，再按高优先级排序。
最后的次序就是高优先级高的在前，高优先级相同的低优先级高的在前。

算法原理：
    * 取得数组中的最大数，并获取其位数；
    * arr为原始数组，从最低位开始取每个位组成 radix 数组；
    * 对 radix 进行计数排序（利用计数排序适用于小范围数的特点）；
"""


def radix_sort(nums):
    # 算n：为了计算最高位
    max_num = max(nums)
    n = 1
    while max_num > 10 ** n:
        n += 1

    for k in range(n):
        # 初始化0-9个桶来排序
        buckets = [[] for i in range(10)]
        for subnum in nums:
            buckets[int(subnum / (10 ** k) % 10)].append(subnum)
        nums = [num for bucket in buckets for num in bucket]
    return nums


s = [3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48]
print(radix_sort(s))

# 结果如下：
# [2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]


